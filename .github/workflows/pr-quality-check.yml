name: PR Quality Check

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize]

jobs:
  pr-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history to check commits
        
    - name: Check for uncommitted changes indicator
      run: |
        echo "Checking if PR description mentions uncommitted changes..."
        
        # Get PR body
        PR_BODY="${{ github.event.pull_request.body }}"
        
        # Check for common indicators of uncommitted changes
        if echo "$PR_BODY" | grep -i "uncommitted\|changes not staged\|working tree\|git status"; then
          echo "⚠️  PR description mentions uncommitted changes"
          echo "This might indicate the PR was created with unstaged changes"
          echo "Please verify all intended changes are included"
          # Don't fail, just warn
        else
          echo "✅ No indication of uncommitted changes in PR description"
        fi

    - name: Check commit message format
      run: |
        echo "Checking commit message format..."
        
        # Get list of commits in this PR
        git log --format="%s" origin/main..HEAD | while read commit_msg; do
          # Check conventional commit format
          if ! echo "$commit_msg" | grep -E "^(feat|fix|docs|chore|refactor|test|ci|perf|build)(\(.+\))?: .+"; then
            echo "❌ Commit message doesn't follow conventional commit format:"
            echo "   $commit_msg"
            echo "Expected format: type(scope): description"
            echo "Types: feat, fix, docs, chore, refactor, test, ci, perf, build"
            exit 1
          fi
        done
        echo "✅ All commit messages follow conventional commit format"

    - name: Check for large file additions
      run: |
        echo "Checking for large file additions..."
        
        # Check for files > 1MB
        git diff --name-only origin/main..HEAD | while read file; do
          if [ -f "$file" ] && [ $(stat --format="%s" "$file" 2>/dev/null || echo 0) -gt 1048576 ]; then
            echo "⚠️  Large file detected: $file ($(stat --format="%s" "$file" | numfmt --to=iec-i))"
            echo "Consider if this should be in git or external storage"
          fi
        done

    - name: Suggest next steps
      run: |
        echo "✅ PR quality checks completed!"
        echo ""
        echo "📋 Next steps after merge:"
        echo "- Update local main branch: git checkout main && git pull"
        echo "- Delete feature branch: git branch -d <branch-name>"
        echo "- Check for any uncommitted changes: git status"
        echo ""
        echo "🎯 Remember: Keep working tree clean between PRs!"
